apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.10"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    // Configure JaCoCo for unit tests
    android.testOptions.unitTests.all { test ->
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
        test.jacoco.excludes = ['jdk.internal.*']
    }
    
    // Create a task to merge coverage data from unit and instrumented tests
    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            xml.required = true
            html.required = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ])
    }
}