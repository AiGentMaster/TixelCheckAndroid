name: Build TixelCheck APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: tixelcheck-debug
        path: app/build/outputs/apk/debug/app-debug.apk

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Decode Keystore
      env:
        ENCODED_KEYSTORE: ${{ secrets.SIGNING_KEY }}
      run: |
        echo $ENCODED_KEYSTORE | base64 -d > keystore.jks
      
    - name: Build and sign release APK
      env:
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      run: |
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=../keystore.jks \
          -Pandroid.injected.signing.store.password=$KEY_STORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD
        
    - name: Upload signed release APK
      uses: actions/upload-artifact@v4
      with:
        name: tixelcheck-release
        path: app/build/outputs/apk/release/app-release.apk
        
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: TixelCheck v${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          app/build/outputs/apk/release/app-release.apk
        body: |
          TixelCheck v${{ github.run_number }}
          
          **Installation:**
          1. Download the APK file
          2. Allow installation from unknown sources in your device settings
          3. Install the APK
          
          **Features:**
          - Monitor Tixel ticket pages for availability
          - Customizable checking frequency (1, 2, 5, 10, 30, 60 minutes)
          - Loud alerts when tickets become available
          - Direct link to ticket pages from notifications