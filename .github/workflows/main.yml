name: Android Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 7.4
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run Unit Tests
        run: ./gradlew testProductionReleaseUnitTest
        
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: app/build/reports/tests/testProductionReleaseUnitTest/

  build_release:
    needs: [unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 7.4
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean build directory
        run: ./gradlew clean
      
      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.SIGNING_KEY }}
        run: |
          if [ -n "$ENCODED_KEYSTORE" ]; then
            echo $ENCODED_KEYSTORE | base64 -d > keystore.jks
            echo "Keystore decoded successfully"
          else
            echo "No keystore provided, skipping decoding"
            touch keystore.jks
          fi
      
      - name: Build and sign release APK
        env:
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          if [ -n "$KEY_STORE_PASSWORD" ] && [ -n "$KEY_PASSWORD" ] && [ -n "$KEY_ALIAS" ]; then
            ./gradlew assembleProductionRelease bundleProductionRelease \
              -Pandroid.injected.signing.store.file=../keystore.jks \
              -Pandroid.injected.signing.store.password=$KEY_STORE_PASSWORD \
              -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
              -Pandroid.injected.signing.key.password=$KEY_PASSWORD \
              --stacktrace
          else
            echo "Missing signing configuration, building unsigned APK"
            ./gradlew assembleProductionRelease bundleProductionRelease --stacktrace
          fi
        
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: tixelcheck-release
          path: app/build/outputs/apk/production/release/app-production-release*.apk
          
      - name: Upload Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: tixelcheck-bundle
          path: app/build/outputs/bundle/productionRelease/app-production-release.aab
          
      - name: Generate version tag
        id: generate_version
        run: echo "VERSION=$(grep -oP 'versionName "\K[^"]+' app/build/generated/source/buildConfig/production/release/com/example/tixelcheck/BuildConfig.java)" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.generate_version.outputs.VERSION }}
          name: TixelCheck v${{ steps.generate_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/production/release/app-production-release*.apk
          body: |
            ## TixelCheck v${{ steps.generate_version.outputs.VERSION }}
            
            **New in this version:**
            - Improved performance
            - Bug fixes
            - Enhanced reliability
            
            **Installation:**
            1. Download the APK file
            2. Allow installation from unknown sources in your device settings
            3. Install the APK
            
            **Features:**
            - Monitor Tixel ticket pages for availability
            - Customizable checking frequency (1, 2, 5, 10, 30, 60 minutes)
            - Loud alerts when tickets become available
            - Direct link to ticket pages from notifications